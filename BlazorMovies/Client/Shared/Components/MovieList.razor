@inject IJSRuntime JS

<GenericList List="Movies">

    <ChildContent>
        <div class="row">
            <div class="col-md-4">
                <div class="checkbox">
                    <label>
                        <input type="checkbox" @bind="@isAdmin" />IS Admin?
                    </label>
                </div>
            </div>
        </div>
    </ChildContent>
       
    <ElementTemplate Context="movie">
        <MovieItem Movie="movie" IsAdmin="isAdmin" DeleteMovie="DeleteMovie" />
    </ElementTemplate>
</GenericList>

<ConfirmationModal @ref="confirmationModal" OnConfirm="OnConfirm" OnCancel="OnCancel">
    <div>Do you want to delete @movieToBeDeleted.Title?</div>
</ConfirmationModal>

@code {

    [Parameter] public IList<Movie> Movies { get; set; } // = new List<Movie>();
    [Parameter] public RenderFragment NullTemplate { get; set; }
    [Parameter] public RenderFragment EmptyTemplate { get; set; }

    bool isAdmin = false;

    ConfirmationModal confirmationModal;
    Movie movieToBeDeleted = null;

    void DeleteMovie(Movie movie)
    {
        movieToBeDeleted = movie;
        confirmationModal.Show();
    }

    private async Task OnConfirm()
    {
        await Task.Delay(5000);
        Movies.Remove(movieToBeDeleted);
        movieToBeDeleted = null;

        await JS.Alert("Yay! Movie deleted successfully...");
        confirmationModal.Hide();
    }

    private async Task OnCancel()
    {
        confirmationModal.Hide();

        await JS.Alert("Better safe than sorry...");
    }

    protected async override Task OnInitializedAsync()
    {
        await Task.Delay(5000);
        //Movies = GetMovies();
    }

}
