@using Client.Helpers;

<div class="container-fluid">
    @if (Movies == null)
    {
        @if(NullTemplate != null)
        {
            @NullTemplate
        }
        else
        {
            <h4 class="card-title" align="center">
                The content is loading...
            </h4>
        }
        
    }
    else if (Movies.Count == 0)
    {
        @if(EmptyTemplate != null)
        {
            @EmptyTemplate
        }
        else
        {
            <h4 class="card-title" align="center">
                No records found in the database...
            </h4>
        }
        
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <div class="checkbox">
                    <label>
                        <input type="checkbox" @bind="@isAdmin" />IS Admin?
                    </label>
                </div>
            </div>
        </div>
            
        <div class="row">
            @foreach (var movie in Movies)
            {
                <MovieItem Movie="movie" IsAdmin="isAdmin" DeleteMovie="DeleteMovie" />
            }
        </div>
    }

</div>

@code {

    [Parameter]
    public IList<Movie> Movies { get; set; } = new List<Movie>();
    [Parameter]
    public RenderFragment NullTemplate { get; set; }
    [Parameter]
    public RenderFragment EmptyTemplate { get; set; }

    bool isAdmin = false;

    async Task DeleteMovie(Movie movie)
    {
        Console.WriteLine($"Deleting movie: { movie }...");
        await Task.Delay(5000);
        Movies.Remove(movie);
        Console.WriteLine($"{ movie } deleted!!!");
    }

    protected async override Task OnInitializedAsync()
    {
        await Task.Delay(5000);
        //Movies = GetMovies();
    }

}
